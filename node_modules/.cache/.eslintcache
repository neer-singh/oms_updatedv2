[{"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\index.js":"1","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\App.js":"2","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Home\\Home.jsx":"3","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Masterdata\\MasterData.jsx":"4","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Dealers\\Profile.jsx":"5","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Dealers\\Dealers.jsx":"6","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Distributor\\Ditributor.jsx":"7","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Tax\\Tax.jsx":"8","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Distributor Order\\DistributorOrder.jsx":"9","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\OrderDetails\\OrderDetails.jsx":"10","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\DealerMargin\\DealerMargin.jsx":"11","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Item\\Item.jsx":"12","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\containers\\SideNav\\SideNav.jsx":"13","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\components\\Table\\TableC.js":"14","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\assets\\Json\\data.js":"15","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\containers\\MenuItem\\MenuItem.jsx":"16","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\components\\Table\\TableTax.jsx":"17","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\components\\NavList\\NavList.jsx":"18","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\assets\\Json\\ORDER.js":"19","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\InventoryVisibility\\InventoryVisibility.jsx":"20"},{"size":265,"mtime":1617124824000,"results":"21","hashOfConfig":"22"},{"size":1745,"mtime":1622576790379,"results":"23","hashOfConfig":"22"},{"size":759,"mtime":1617280996000,"results":"24","hashOfConfig":"22"},{"size":788,"mtime":1617282682000,"results":"25","hashOfConfig":"22"},{"size":53671,"mtime":1622576417079,"results":"26","hashOfConfig":"22"},{"size":13085,"mtime":1622548604657,"results":"27","hashOfConfig":"22"},{"size":2656,"mtime":1622503003960,"results":"28","hashOfConfig":"22"},{"size":22353,"mtime":1622548102311,"results":"29","hashOfConfig":"22"},{"size":4767,"mtime":1621442197604,"results":"30","hashOfConfig":"22"},{"size":7981,"mtime":1618328328987,"results":"31","hashOfConfig":"22"},{"size":24659,"mtime":1622546648825,"results":"32","hashOfConfig":"22"},{"size":15674,"mtime":1622400123898,"results":"33","hashOfConfig":"22"},{"size":1295,"mtime":1622484618905,"results":"34","hashOfConfig":"22"},{"size":12307,"mtime":1622453396179,"results":"35","hashOfConfig":"22"},{"size":1738,"mtime":1617957074000,"results":"36","hashOfConfig":"22"},{"size":857,"mtime":1617141611000,"results":"37","hashOfConfig":"22"},{"size":4734,"mtime":1622548197663,"results":"38","hashOfConfig":"22"},{"size":403,"mtime":1622402041574,"results":"39","hashOfConfig":"22"},{"size":1071612,"mtime":1618505499656,"results":"40","hashOfConfig":"22"},{"size":8062,"mtime":1622584257340,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e0skhk",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\index.js",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\App.js",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Home\\Home.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Masterdata\\MasterData.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Dealers\\Profile.jsx",["86","87"],"import { faPen, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport { ErrorMessage, FastField, Formik, getIn } from 'formik';\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport * as yup from 'yup';\r\nimport 'yup-phone';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardColumns,\r\n  CardDeck,\r\n  CardGroup,\r\n  Container,\r\n  Form,\r\n  FormFeedback,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport './Profile.css';\r\nconst validationSchema = yup.object().shape({\r\n  name: yup.string().required('*Required').min(3),\r\n  city: yup.string('Enter a Valid City').required('*Required'),\r\n  contact: yup.string().phone('India').required('*Required'),\r\n  dealerPhone: yup.string().phone('India').required('*Required'),\r\n  state: yup.string().required('*Required'),\r\n  dealerMail: yup.string().email('Enter a valid email').required('*Required'),\r\n  address: yup.string('Enter a Valid Address').required('*Required'),\r\n  accountNumber: yup.number('Enter Valid Account Number').required('*Required'),\r\n  upi: yup.string().required('*Required'),\r\n  bankName: yup.string('Enter a Valid Bank Name').required('*Required'),\r\n  cardNumber: yup\r\n    .number('Enter Valid Card Number')\r\n    .typeError('Numbers Only')\r\n    .required('*Required'),\r\n  shopArea: yup\r\n    .number('Numbers only')\r\n    .typeError('Numbers Only')\r\n    .required('*Required'),\r\n  shopNature: yup.string('Enter a Valid Shop Nature').required('*Required'),\r\n  godownArea: yup.number('Number only').required('*Required'),\r\n  ownerName: yup.string('Enter a Valid Name').required('*Required'),\r\n  myManager: yup.string('Enter a Valid Manager Name').required('*Required'),\r\n  promoter: yup.string('Enter a Valid Promoter').required('*Required'),\r\n  creditTerm: yup.number('Numbers only').required('*Required'),\r\n  cashTerm: yup\r\n    .number('Numbers only')\r\n    .typeError('Numbers Only')\r\n    .required('*Required'),\r\n  deposite: yup\r\n    .number('Enter Valid Deposite Amount')\r\n    .typeError('Numbers Only')\r\n    .required('*Required'),\r\n  approver1: yup.string('Enter a Valid Approver').required('*Required'),\r\n  approver2: yup.string('Enter a Valid Approver').required('*Required'),\r\n  distributorName: yup\r\n    .string('Enter a Valid Distributor Name')\r\n    .required('*Required'),\r\n  storeClassification: yup\r\n    .string('Enter a Valid Store Classification')\r\n    .required('*Required'),\r\n  registrations: yup.object().shape({\r\n    gst: yup\r\n      .boolean('Boolean Values Only')\r\n      .typeError('Boolean Values Only')\r\n      .required('*Required'),\r\n    pan: yup\r\n      .boolean('Boolean Values Only')\r\n      .typeError('Boolean Values Only')\r\n      .required('*Required'),\r\n    eCart: yup\r\n      .boolean('Boolean Values Only')\r\n      .typeError('Boolean Values Only')\r\n      .required('*Required'),\r\n  }),\r\n  skdAmount: yup.object().shape({\r\n    from: yup\r\n      .number('Numbers Only')\r\n      .typeError('Numbers Only')\r\n      .required('*Required'),\r\n    to: yup\r\n      .number('Numbers Only')\r\n      .typeError('Numbers Only')\r\n      .required('*Required'),\r\n  }),\r\n  annualAmount: yup.object().shape({\r\n    from: yup\r\n      .number('Numbers Only')\r\n      .typeError('Numbers Only')\r\n      .required('*Required'),\r\n    to: yup\r\n      .number('Numbers Only')\r\n      .typeError('Numbers Only')\r\n      .required('*Required'),\r\n  }),\r\n  quaterlyAmount: yup.object().shape({\r\n    from: yup\r\n      .number('Numbers Only')\r\n      .typeError('Numbers Only')\r\n      .required('*Required'),\r\n    to: yup\r\n      .number('Numbers Only')\r\n      .typeError('Numbers Only')\r\n      .required('*Required'),\r\n  }),\r\n});\r\nconst Profile = () => {\r\n  //////////////////////////////////////////states\r\n  const [responseData, setResponseData] = useState('');\r\n\r\n  //////////////////////////////////////////////////modelState\r\n  const [personalDetailsModel, setPersonalDetailsModel] = useState(false);\r\n  const [bankDetailsModel, setBankDetailsModel] = useState(false);\r\n  const [storeDetailsModel, setStoreDetailsModel] = useState(false);\r\n  const [contactDetailsModel, setContactDetailsModel] = useState(false);\r\n  const [targetDetailsModel, setTargetDetailsModel] = useState(false);\r\n  const [paymentTermsModel, setPaymentTermsModel] = useState(false);\r\n  const [myOrganisationModel, setMyOrganisationModel] = useState(false);\r\n  const [classificationDetailsModel, setClassificationDetailsModel] =\r\n    useState(false);\r\n  const [distributorNameModel, setDistributorNameModel] = useState(false);\r\n  ///////////////////////////////////////////////useParams\r\n  let { id } = useParams();\r\n\r\n  ///////////////////////////////////////////loadProfile\r\n  const loadProfile = useCallback(async () => {\r\n    await axios\r\n      .get(`http://localhost:3003/dealers?id=${id}`)\r\n      .then((response) => {\r\n        setResponseData(response.data[0]);\r\n      })\r\n      .catch((error) => {\r\n        console.log('error', error);\r\n      });\r\n  }, [id]);\r\n\r\n  /////////////////////////////////////////////////////////////////////useEffect\r\n  useEffect(() => {\r\n    loadProfile();\r\n  }, [loadProfile]);\r\n\r\n  /////////////////////////////////////////toggles\r\n  const togglePersonalDetailsModel = () => {\r\n    setPersonalDetailsModel(!personalDetailsModel);\r\n  };\r\n  const toggleBankDetailsModel = () => {\r\n    setBankDetailsModel(!bankDetailsModel);\r\n  };\r\n  const toggleStoreDetailsModel = () => {\r\n    setStoreDetailsModel(!storeDetailsModel);\r\n  };\r\n  const toggleContactDetailsModel = () => {\r\n    setContactDetailsModel(!contactDetailsModel);\r\n  };\r\n  const toggleTargetDetailsModel = () => {\r\n    setTargetDetailsModel(!targetDetailsModel);\r\n  };\r\n  const togglePaymentTermsModel = () => {\r\n    setPaymentTermsModel(!paymentTermsModel);\r\n  };\r\n  const toggleMyOrganisationModel = () => {\r\n    setMyOrganisationModel(!myOrganisationModel);\r\n  };\r\n  const toggleClassificationDetailsModel = () => {\r\n    setClassificationDetailsModel(!classificationDetailsModel);\r\n  };\r\n  const toggleDistributorNameModel = () => {\r\n    setDistributorNameModel(!distributorNameModel);\r\n  };\r\n  ////////////////////////////////////onSubmit\r\n\r\n  const onSubmit = async (props) => {\r\n    await axios\r\n      .put(`http://localhost:3003/dealers/${id}`, props)\r\n      .then((response) => {\r\n        console.log(response);\r\n        setPersonalDetailsModel(false);\r\n        setBankDetailsModel(false);\r\n        setStoreDetailsModel(false);\r\n        setContactDetailsModel(false);\r\n        setTargetDetailsModel(false);\r\n        setPaymentTermsModel(false);\r\n        setMyOrganisationModel(false);\r\n        setClassificationDetailsModel(false);\r\n        setDistributorNameModel(false);\r\n        loadProfile();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////cardDetails\r\n  const personalDetails = [\r\n    { title: 'Dealer Name', value: responseData.name },\r\n    { title: 'Dealer Number', value: responseData.contact },\r\n    { title: 'Registrations', value: responseData.registrations },\r\n    { title: 'Billing Address', value: responseData.address },\r\n  ];\r\n  const bankDetails = [\r\n    { title: 'Account Number', value: responseData.accountNumber },\r\n    { title: 'UPI', value: responseData.upi },\r\n    { title: 'Bank Name', value: responseData.bankName },\r\n    { title: 'Card Number', value: responseData.cardNumber },\r\n  ];\r\n  const storeDetails = [\r\n    { title: 'Shop Area', value: responseData.shopArea },\r\n    { title: 'Shop Nature', value: responseData.shopNature },\r\n    { title: 'Godown Area', value: responseData.godownArea },\r\n  ];\r\n  const contactDetils = [\r\n    { title: 'Owner Name', value: responseData.ownerName },\r\n    { title: 'Dealer Phone', value: responseData.dealerPhone },\r\n    { title: 'My Manager', value: responseData.myManager },\r\n    { title: 'Dealer Mail', value: responseData.dealerMail },\r\n    { title: 'Promoter', value: responseData.promoter },\r\n  ];\r\n  const targetDetails = [\r\n    {\r\n      title: 'SKD Amount',\r\n      value: [responseData.skdAmount],\r\n    },\r\n    {\r\n      title: 'Annual Amount',\r\n      value: [responseData.annualAmount],\r\n    },\r\n    {\r\n      title: 'Quaterly Amount',\r\n      value: [responseData.quaterlyAmount],\r\n    },\r\n  ];\r\n  const paymentTerms = [\r\n    { title: 'Credit Term', value: responseData.creditTerm },\r\n    { title: 'cashTerm', value: responseData.cashTerm },\r\n    { title: 'deposite', value: responseData.deposite },\r\n  ];\r\n  const myOrganisation = [\r\n    { title: 'Approver 1', value: responseData.approver1 },\r\n    { title: 'Approver 2', value: responseData.approver2 },\r\n  ];\r\n  const classificationDetails = [\r\n    { title: 'Store Classification', value: responseData.storeClassification },\r\n  ];\r\n  return (\r\n    <Container>\r\n      <h4 className='pt-4 pb-5'>Dealer's Profile</h4>\r\n      {responseData === '' ? (\r\n        ''\r\n      ) : (\r\n        <>\r\n          <CardDeck className='mb-3'>\r\n            <PersonalDetails\r\n              heading='Personal Details'\r\n              details={personalDetails}\r\n              click={() => setPersonalDetailsModel(!personalDetailsModel)}\r\n            />\r\n            <Details\r\n              heading='Bank Details'\r\n              details={bankDetails}\r\n              click={() => setBankDetailsModel(!bankDetailsModel)}\r\n            />\r\n            <StoreDetails\r\n              heading='Store Details'\r\n              details={storeDetails}\r\n              click={() => {\r\n                setStoreDetailsModel(!storeDetailsModel);\r\n              }}\r\n            />\r\n          </CardDeck>\r\n          <CardDeck className='mb-3'>\r\n            <Details\r\n              heading='Contact Details'\r\n              details={contactDetils}\r\n              click={() => {\r\n                setContactDetailsModel(!contactDetailsModel);\r\n              }}\r\n            />\r\n            <TargetDetails\r\n              heading='Target Details'\r\n              details={targetDetails}\r\n              click={() => setTargetDetailsModel(!targetDetailsModel)}\r\n            />\r\n            <PaymentTerms\r\n              heading='Payment Terms'\r\n              details={paymentTerms}\r\n              click={() => {\r\n                setPaymentTermsModel(!paymentTermsModel);\r\n              }}\r\n            />\r\n          </CardDeck>\r\n          <CardDeck className='mb-3'>\r\n            <Details\r\n              heading='My Organisation'\r\n              details={myOrganisation}\r\n              click={() => setMyOrganisationModel(!myOrganisationModel)}\r\n            />\r\n            <DistributorName\r\n              heading='Dirtributor Name'\r\n              name={responseData.distributorName}\r\n              click={() => setDistributorNameModel(!distributorNameModel)}\r\n            />\r\n            <Details\r\n              heading='Classification Details'\r\n              details={classificationDetails}\r\n              click={() =>\r\n                setClassificationDetailsModel(!classificationDetailsModel)\r\n              }\r\n            />\r\n          </CardDeck>\r\n        </>\r\n      )}\r\n      <Modal isOpen={personalDetailsModel} toggle={togglePersonalDetailsModel}>\r\n        <ModalHeader\r\n          toggle={togglePersonalDetailsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={togglePersonalDetailsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Personal Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              values,\r\n              errors,\r\n              isValid,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='Distributor'>Dealer's Name</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='name'\r\n                      value={values.name}\r\n                      onChange={handleChange}\r\n                      invalid={errors.name}\r\n                      valid={!errors.name}\r\n                    />\r\n                    {errors.name === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.name}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='Contact Number'>Contact Number</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='contact'\r\n                      value={values.contact}\r\n                      onChange={handleChange}\r\n                      invalid={errors.contact}\r\n                      valid={!errors.contact}\r\n                    />\r\n                    {errors.contact === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.contact}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='gst'>GST</Label>\r\n                    <FastField\r\n                      name='registrations.gst'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          invalid={\r\n                            getIn(form.errors, 'registrations.gst') !==\r\n                            undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'registrations.gst') ===\r\n                            undefined\r\n                          }\r\n                          name='registrations.gst'\r\n                          onBlur={handleBlur}\r\n                          type='select'\r\n                          onChange={handleChange}\r\n                          className='selectHirarchy'>\r\n                          <option selected disabled>\r\n                            Select GST\r\n                          </option>\r\n                          <option value={true}>Yes</option>\r\n                          <option value={false}>No</option>\r\n                        </Input>\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='registrations.gst'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='pan'>PAN</Label>\r\n                    <FastField\r\n                      name='registrations.pan'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          invalid={\r\n                            getIn(form.errors, 'registrations.pan') !==\r\n                            undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'registrations.pan') ===\r\n                            undefined\r\n                          }\r\n                          name='registrations.pan'\r\n                          onBlur={handleBlur}\r\n                          type='select'\r\n                          onChange={handleChange}\r\n                          className='selectHirarchy'>\r\n                          <option selected disabled>\r\n                            Select PAN\r\n                          </option>\r\n                          <option value={true}>Yes</option>\r\n                          <option value={false}>No</option>\r\n                        </Input>\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='registrations.pan'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='eCart'>E-Cart</Label>\r\n                    <FastField\r\n                      name='registrations.eCart'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          invalid={\r\n                            getIn(form.errors, 'registrations.eCart') !==\r\n                            undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'registrations.eCart') ===\r\n                            undefined\r\n                          }\r\n                          name='registrations.eCart'\r\n                          onBlur={handleBlur}\r\n                          type='select'\r\n                          onChange={handleChange}\r\n                          className='selectHirarchy'>\r\n                          <option selected disabled>\r\n                            Select E-Cart\r\n                          </option>\r\n                          <option value={true}>Yes</option>\r\n                          <option value={false}>No</option>\r\n                          <option value=''>hy</option>\r\n                        </Input>\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='registrations.eCart'\r\n                    />\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={bankDetailsModel} toggle={toggleBankDetailsModel}>\r\n        <ModalHeader\r\n          toggle={toggleBankDetailsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleBankDetailsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Bank Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              values,\r\n              errors,\r\n              isValid,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='accountNumber'>Account Number</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='accountNumber'\r\n                      value={values.accountNumber}\r\n                      onChange={handleChange}\r\n                      invalid={errors.accountNumber}\r\n                      valid={!errors.accountNumber}\r\n                    />\r\n                    {errors.accountNumber === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.accountNumber}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='upi'>UPI</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='upi'\r\n                      value={values.upi}\r\n                      onChange={handleChange}\r\n                      invalid={errors.upi}\r\n                      valid={!errors.upi}\r\n                    />\r\n                    {errors.upi === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.upi}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='bankName'>Bank Name</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='bankName'\r\n                      value={values.bankName}\r\n                      onChange={handleChange}\r\n                      invalid={errors.bankName}\r\n                      valid={!errors.bankName}\r\n                    />\r\n                    {errors.bankName === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.bankName}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='cardNumber'>Card Number</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='cardNumber'\r\n                      value={values.cardNumber}\r\n                      onChange={handleChange}\r\n                      invalid={errors.cardNumber}\r\n                      valid={!errors.cardNumber}\r\n                    />\r\n                    {errors.cardNumber === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.cardNumber}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={storeDetailsModel} toggle={toggleStoreDetailsModel}>\r\n        <ModalHeader\r\n          toggle={toggleStoreDetailsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleStoreDetailsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>\"Edit Store Details\"</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              values,\r\n              errors,\r\n              isValid,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='shopArea'>Shop Area</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='shopArea'\r\n                      value={values.shopArea}\r\n                      onChange={handleChange}\r\n                      invalid={errors.shopArea}\r\n                      valid={!errors.shopArea}\r\n                    />\r\n                    {errors.shopArea === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.shopArea}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='shopNature'>Shop Nature</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='shopNature'\r\n                      value={values.shopNature}\r\n                      onChange={handleChange}\r\n                      invalid={errors.shopNature}\r\n                      valid={!errors.shopNature}\r\n                    />\r\n                    {errors.shopNature === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.shopNature}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='godownArea'>Godown Area</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='godownArea'\r\n                      value={values.godownArea}\r\n                      onChange={handleChange}\r\n                      invalid={errors.godownArea}\r\n                      valid={!errors.godownArea}\r\n                    />\r\n                    {errors.godownArea === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.godownArea}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={contactDetailsModel} toggle={toggleContactDetailsModel}>\r\n        <ModalHeader\r\n          toggle={toggleContactDetailsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleContactDetailsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Contact Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              values,\r\n              errors,\r\n              isValid,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='ownerName'>Owner Name</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='ownerName'\r\n                      value={values.ownerName}\r\n                      onChange={handleChange}\r\n                      invalid={errors.ownerName}\r\n                      valid={!errors.ownerName}\r\n                    />\r\n                    {errors.ownerName === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.ownerName}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='dealerPhone'>Dealer Phone</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='dealerPhone'\r\n                      value={values.dealerPhone}\r\n                      onChange={handleChange}\r\n                      invalid={errors.dealerPhone}\r\n                      valid={!errors.dealerPhone}\r\n                    />\r\n                    {errors.dealerPhone === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.dealerPhone}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='myManager'>My Manager</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='myManager'\r\n                      value={values.myManager}\r\n                      onChange={handleChange}\r\n                      invalid={errors.myManager}\r\n                      valid={!errors.myManager}\r\n                    />\r\n                    {errors.myManager === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.myManager}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='dealerMail'>Dealer Mail</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='dealerMail'\r\n                      value={values.dealerMail}\r\n                      onChange={handleChange}\r\n                      invalid={errors.dealerMail}\r\n                      valid={!errors.dealerMail}\r\n                    />\r\n                    {errors.dealerMail === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.dealerMail}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='promoter'>Promoter</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='promoter'\r\n                      value={values.promoter}\r\n                      onChange={handleChange}\r\n                      invalid={errors.promoter}\r\n                      valid={!errors.promoter}\r\n                    />\r\n                    {errors.promoter === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.promoter}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={targetDetailsModel} toggle={toggleTargetDetailsModel}>\r\n        <ModalHeader\r\n          toggle={toggleTargetDetailsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleTargetDetailsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Target Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({ isValid, handleChange, handleBlur, handleSubmit, dirty }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='annualAmount'>SKD Amount Min</Label>\r\n                    <FastField name='skdAmount.from'>\r\n                      {({ form, field }) => {\r\n                        return (\r\n                          <>\r\n                            <Input\r\n                              {...field}\r\n                              name='skdAmount.from'\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              invalid={\r\n                                getIn(form.errors, 'skdAmount.from') !==\r\n                                undefined\r\n                              }\r\n                              valid={\r\n                                getIn(form.errors, 'skdAmount.from') ===\r\n                                undefined\r\n                              }\r\n                            />\r\n\r\n                            {console.log(form)}\r\n                          </>\r\n                        );\r\n                      }}\r\n                    </FastField>\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='skdAmount.from'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='skdAmount'>SKD Amount Max</Label>\r\n                    <FastField\r\n                      name='skdAmount.to'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          name='skdAmount.to'\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          invalid={\r\n                            getIn(form.errors, 'skdAmount.to') !== undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'skdAmount.to') === undefined\r\n                          }\r\n                        />\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='skdAmount.to'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='annualAmount'>Annual Amount Min</Label>\r\n                    <FastField\r\n                      name='annualAmount.from'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          name='annualAmount.from'\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          invalid={\r\n                            getIn(form.errors, 'annualAmount.from') !==\r\n                            undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'annualAmount.from') ===\r\n                            undefined\r\n                          }\r\n                        />\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='annualAmount.from'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='annualAmount'>Annual Amount Max</Label>\r\n                    <FastField\r\n                      name='annualAmount.to'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          name='annualAmount.to'\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          invalid={\r\n                            getIn(form.errors, 'annualAmount.to') !== undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'annualAmount.to') === undefined\r\n                          }\r\n                        />\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='annualAmount.to'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='quaterlyAmount'>Annual Amount Min</Label>\r\n                    <FastField\r\n                      name='quaterlyAmount.from'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          name='quaterlyAmount.from'\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          invalid={\r\n                            getIn(form.errors, 'quaterlyAmount.from') !==\r\n                            undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'quaterlyAmount.from') ===\r\n                            undefined\r\n                          }\r\n                        />\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='quaterlyAmount.from'\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='quaterlyAmount'>Annual Amount Max</Label>\r\n                    <FastField\r\n                      name='quaterlyAmount.to'\r\n                      render={({ form, field }) => (\r\n                        <Input\r\n                          {...field}\r\n                          name='quaterlyAmount.to'\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          invalid={\r\n                            getIn(form.errors, 'quaterlyAmount.to') !==\r\n                            undefined\r\n                          }\r\n                          valid={\r\n                            getIn(form.errors, 'quaterlyAmount.to') ===\r\n                            undefined\r\n                          }\r\n                        />\r\n                      )}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormFeedback}\r\n                      name='quaterlyAmount.to'\r\n                    />\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={paymentTermsModel} toggle={togglePaymentTermsModel}>\r\n        <ModalHeader\r\n          toggle={togglePaymentTermsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={togglePaymentTermsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Target Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              isValid,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              errors,\r\n              values,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='creditTerm'>Credit Term</Label>\r\n\r\n                    <FastField\r\n                      as={Input}\r\n                      name='creditTerm'\r\n                      value={values.creditTerm}\r\n                      onChange={handleChange}\r\n                      invalid={errors.creditTerm}\r\n                      valid={!errors.creditTerm}\r\n                    />\r\n                    {errors.creditTerm === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.creditTerm}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='cashTerm'>Cash Term</Label>\r\n\r\n                    <FastField\r\n                      as={Input}\r\n                      name='cashTerm'\r\n                      value={values.cashTerm}\r\n                      onChange={handleChange}\r\n                      invalid={errors.cashTerm}\r\n                      valid={!errors.cashTerm}\r\n                    />\r\n                    {errors.cashTerm === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.cashTerm}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='deposite'>Deposite</Label>\r\n\r\n                    <FastField\r\n                      as={Input}\r\n                      name='deposite'\r\n                      value={values.deposite}\r\n                      onChange={handleChange}\r\n                      invalid={errors.deposite}\r\n                      valid={!errors.deposite}\r\n                    />\r\n                    {errors.deposite === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.deposite}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={myOrganisationModel} toggle={toggleMyOrganisationModel}>\r\n        <ModalHeader\r\n          toggle={toggleMyOrganisationModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleMyOrganisationModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Target Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              isValid,\r\n              handleChange,\r\n              handleSubmit,\r\n              errors,\r\n              values,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='approver1'>Approver 1</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='approver1'\r\n                      value={values.approver1}\r\n                      onChange={handleChange}\r\n                      invalid={errors.approver1}\r\n                      valid={!errors.approver1}\r\n                    />\r\n                    {errors.approver1 === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.approver1}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label for='approver2'>Approver 2</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='approver2'\r\n                      value={values.approver2}\r\n                      onChange={handleChange}\r\n                      invalid={errors.approver2}\r\n                      valid={!errors.approver2}\r\n                    />\r\n                    {errors.approver2 === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.approver2}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={distributorNameModel} toggle={toggleDistributorNameModel}>\r\n        <ModalHeader\r\n          toggle={toggleDistributorNameModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleDistributorNameModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Distributor Name</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              isValid,\r\n              handleChange,\r\n              handleSubmit,\r\n              errors,\r\n              values,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='distributorName'>Distributor Name</Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='distributorName'\r\n                      value={values.distributorName}\r\n                      onChange={handleChange}\r\n                      invalid={errors.distributorName}\r\n                      valid={!errors.distributorName}\r\n                    />\r\n                    {errors.distributorName === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.distributorName}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal\r\n        isOpen={classificationDetailsModel}\r\n        toggle={toggleClassificationDetailsModel}>\r\n        <ModalHeader\r\n          toggle={toggleClassificationDetailsModel}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggleClassificationDetailsModel}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <div className='d-flex justify-content-center w-100 mb-2'>\r\n            <h4>Edit Classification Details</h4>\r\n          </div>\r\n          <Formik\r\n            initialValues={responseData}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(props) => onSubmit(props)}>\r\n            {({\r\n              isValid,\r\n              handleChange,\r\n              handleSubmit,\r\n              errors,\r\n              values,\r\n              dirty,\r\n            }) => (\r\n              <>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='storeClassification'>\r\n                      Store Classification\r\n                    </Label>\r\n                    <FastField\r\n                      as={Input}\r\n                      name='storeClassification'\r\n                      value={values.storeClassification}\r\n                      onChange={handleChange}\r\n                      invalid={errors.storeClassification}\r\n                      valid={!errors.storeClassification}\r\n                    />\r\n                    {errors.storeClassification === undefined ? (\r\n                      <FormFeedback></FormFeedback>\r\n                    ) : (\r\n                      <FormFeedback>{errors.storeClassification}</FormFeedback>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\nconst PersonalDetails = ({ heading, details, click }) => {\r\n  return (\r\n    <>\r\n      <Card className='personalDetails_card'>\r\n        <CardBody className='p-2'>\r\n          <div className='d-flex justify-content-end'>\r\n            <EditIcon click={click} />\r\n          </div>\r\n          <h4 className='textBlue'>{heading}</h4>\r\n\r\n          <div className='d-flex textBlue'>\r\n            <Label className='textBlue'>{details[0].title}</Label>:\r\n            <p className='ml-2'> {details[0].value}</p>\r\n          </div>\r\n          <div className='d-flex textBlue'>\r\n            <Label>{details[1].title}</Label>:\r\n            <p className='ml-2'> {details[1].value}</p>\r\n          </div>\r\n          <div className='d-flex'>\r\n            <Label>Registrations</Label>:\r\n            <p\r\n              className={\r\n                details[2].value.gst ? 'validGst mx-2' : ' inValidGst mx-2'\r\n              }>\r\n              GST\r\n            </p>\r\n            <p\r\n              className={\r\n                details[2].value.pan ? 'validGst mx-2' : ' inValidGst mx-2'\r\n              }>\r\n              PAN\r\n            </p>\r\n            <p\r\n              className={\r\n                details[2].value.eCart ? 'validGst mx-2' : ' inValidGst mx-2'\r\n              }>\r\n              E-Cart\r\n            </p>\r\n          </div>\r\n          <div className='d-flex textBlue'>\r\n            <Label>{details[3].title}</Label>:\r\n            <p className='ml-2'> {details[3].value}</p>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nconst Details = ({ heading, details, click }) => {\r\n  return (\r\n    <>\r\n      <Card className='textBlue personalDetails_card'>\r\n        <CardBody className='p-2'>\r\n          <div className='d-flex justify-content-end'>\r\n            <EditIcon click={click} />\r\n          </div>\r\n          <h4>{heading}</h4>\r\n          {details.map((data, index) => {\r\n            return (\r\n              <div className='d-flex' key={index}>\r\n                <Label>{data.title}</Label>:<p className='ml-2'>{data.value}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nconst TargetDetails = ({ heading, details, click }) => {\r\n  return (\r\n    <>\r\n      <Card className='textBlue personalDetails_card'>\r\n        <CardBody className='p-2'>\r\n          <div className='d-flex justify-content-end'>\r\n            <EditIcon click={click} />\r\n          </div>\r\n          <h4>{heading}</h4>\r\n          {details.map((data, index) => {\r\n            return (\r\n              <div className='d-flex' key={index}>\r\n                <Label>{data.title}</Label>:\r\n                <p className='ml-2'> ₹{data.value[0].to}</p>/\r\n                <p className='ml-2'> ₹{data.value[0].from}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nconst PaymentTerms = ({ heading, details, click }) => {\r\n  return (\r\n    <>\r\n      <Card className='textBlue personalDetails_card'>\r\n        <CardBody className='p-2'>\r\n          <div className='d-flex justify-content-end'>\r\n            <EditIcon click={click} />\r\n          </div>\r\n          <h4>{heading}</h4>\r\n\r\n          <div className='d-flex'>\r\n            <Label>{details[0].title}</Label>:\r\n            <p className='ml-2'> {details[0].value}</p>\r\n            <p className='ml-1'>Days</p>\r\n          </div>\r\n          <div className='d-flex'>\r\n            <Label>{details[1].title}</Label>:\r\n            <p className='ml-2'> {details[1].value}</p>\r\n            <p className='ml-1'>Days</p>\r\n          </div>\r\n          <div className='d-flex'>\r\n            <Label>{details[2].title}</Label>:\r\n            <p className='ml-2'> ₹{details[2].value}</p>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nconst DistributorName = ({ name, heading, click }) => {\r\n  return (\r\n    <Card className='textBlue personalDetails_card'>\r\n      <CardBody className='p-2'>\r\n        <div className='d-flex justify-content-end'>\r\n          <EditIcon click={click} />\r\n        </div>\r\n        <h4>{heading}</h4>\r\n        <div className='d-flex justify-content-center'>\r\n          <p>{name}</p>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nconst StoreDetails = ({ heading, details, click }) => {\r\n  return (\r\n    <>\r\n      <Card className='textBlue personalDetails_card'>\r\n        <CardBody className='p-2'>\r\n          <div className='d-flex justify-content-end'>\r\n            <EditIcon click={click} />\r\n          </div>\r\n          <h4>{heading}</h4>\r\n          <div className='d-flex'>\r\n            <Label>{details[0].title}</Label>:\r\n            <p className='ml-2'>{details[0].value} sqft</p>\r\n          </div>\r\n          <div className='d-flex'>\r\n            <Label>{details[1].title}</Label>:\r\n            <p className='ml-2'>{details[1].value}</p>\r\n          </div>\r\n          <div className='d-flex'>\r\n            <Label>{details[2].title}</Label>:\r\n            <p className='ml-2'>{details[2].value} sqft</p>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nconst EditIcon = ({ click }) => {\r\n  return <FontAwesomeIcon className='textBlue' icon={faPen} onClick={click} />;\r\n};\r\n","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Dealers\\Dealers.jsx",["88"],"import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faEye,\r\n  faPlus,\r\n  faSearch,\r\n  faTimes,\r\n  faTrash,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  FormFeedback,\r\n  FormGroup,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport { useFilters, usePagination, useSortBy, useTable } from 'react-table';\r\nimport TableTax from '../../components/Table/TableTax';\r\nimport { FastField, Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport 'yup-phone';\r\nimport { Link } from 'react-router-dom';\r\nlet validationSchema = yup.object().shape({\r\n  name: yup.string().required('Required').min(3),\r\n  city: yup.string('Enter a Valid City').required('Required'),\r\n  contact: yup.string().phone('IN').required('Required'),\r\n  state: yup.string().required('Required'),\r\n  email: yup.string().email('Enter a valid email').required('Required'),\r\n  password: yup\r\n    .string()\r\n    .required('required')\r\n    .min(8, 'Minimum 8 characters required'),\r\n});\r\nconst initialValues = {\r\n  name: '',\r\n  email: '',\r\n  city: '',\r\n  state: '',\r\n  password: '',\r\n  contact: '',\r\n};\r\nconst Dealers = () => {\r\n  const [responseData, setResponseData] = useState([\r\n    { id: '', name: '', city: '', state: '', contact: '' },\r\n  ]);\r\n  const [filterInput, setFilterInput] = useState('');\r\n  const [states, setStates] = useState([]);\r\n  const [createModel, setCreateModel] = useState(false);\r\n  const handleFilterChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilter('name', value);\r\n    setFilterInput(value);\r\n  };\r\n  const loadDealer = useCallback(async () => {\r\n    await axios\r\n      .get('http://localhost:3003/dealers')\r\n      .then((response) => {\r\n        setResponseData(response.data);\r\n        const result = response.data;\r\n        setStates([...new Set(result.map((x) => x.state))]);\r\n\r\n        return null;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [setResponseData]);\r\n  useEffect(() => {\r\n    loadDealer();\r\n  }, [loadDealer]);\r\n  const deleteDealer = async (props) => {\r\n    await axios\r\n      .delete(`http://localhost:3003/dealers/${props}`)\r\n      .then((response) => {\r\n        console.log('response delete', response);\r\n        loadDealer();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const DEALERS_COLUMN = useMemo(\r\n    () => [\r\n      {\r\n        Header: '#',\r\n        accessor: 'id',\r\n      },\r\n      { Header: 'Name', accessor: 'name' },\r\n      { Header: 'City', accessor: 'city' },\r\n      { Header: 'State', accessor: 'state' },\r\n      { Header: 'Contact No.', accessor: 'contact' },\r\n      {\r\n        Header: 'Actions',\r\n        accessor: 'action',\r\n        disableSortBy: true,\r\n        Cell: (props) => {\r\n          const row = props.row.original.id;\r\n          return (\r\n            <div className='d-flex justify-content-center '>\r\n              <span>\r\n                <Link to={`dealer/${row}`}>\r\n                  <FontAwesomeIcon className='icon' icon={faEye} />\r\n                </Link>\r\n              </span>\r\n\r\n              <span\r\n                className='ml-2'\r\n                onClick={() => {\r\n                  deleteDealer(row);\r\n                }}>\r\n                <FontAwesomeIcon className='icon' icon={faTrash} />\r\n              </span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const handleSelectFilterChange = (e) => {\r\n    const value = e.target.value === undefined ? '' : e.target.value;\r\n    setFilter('state', value);\r\n  };\r\n\r\n  const toggle = () => setCreateModel(!createModel);\r\n  const columns = useMemo(() => DEALERS_COLUMN, [DEALERS_COLUMN]);\r\n\r\n  const data = useMemo(() => responseData, [responseData]);\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    state,\r\n    gotoPage,\r\n    pageCount,\r\n    setPageSize,\r\n    prepareRow,\r\n    setFilter,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const onSubmit = async (props) => {\r\n    await axios\r\n      .post('http://localhost:3003/dealers', props)\r\n      .then((response) => {\r\n        console.log('response', response);\r\n        loadDealer();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const { pageIndex, pageSize } = state;\r\n  return (\r\n    <>\r\n      <Container>\r\n        <h4 className='pt-4 pb-5'>Dealer's List</h4>\r\n        <div className='d-flex align-items-center justify-content-between'>\r\n          <div className='d-flex w-100 ml-3  mb-3 filters'>\r\n            <div className='d-flex flex-column mr-3 w-100'>\r\n              <span>Dealer</span>\r\n              <InputGroup size='sm'>\r\n                <Input\r\n                  value={filterInput}\r\n                  onChange={handleFilterChange}\r\n                  placeholder='Search Dealer'\r\n                />\r\n                <InputGroupAddon addonType='append'>\r\n                  <InputGroupText>\r\n                    <FontAwesomeIcon className='icon' icon={faSearch} />\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n              </InputGroup>\r\n            </div>\r\n            <div className='d-flex flex-column mr-3 w-100'>\r\n              <span>State</span>\r\n              <InputGroup size='sm'>\r\n                <Input\r\n                  type='select'\r\n                  name='select'\r\n                  onChange={(e) => handleSelectFilterChange(e)}\r\n                  id='exampleSelect'>\r\n                  <option value=''>All</option>\r\n                  {states.map((data, index) => {\r\n                    return (\r\n                      <option value={data} key={index}>\r\n                        {data}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Input>\r\n              </InputGroup>\r\n            </div>\r\n          </div>\r\n          <div className='d-flex text-right justify-content-end '>\r\n            <Button className='text-right' size='sm' onClick={toggle}>\r\n              <FontAwesomeIcon className='mr-1' icon={faPlus} /> Create New\r\n            </Button>\r\n          </div>\r\n        </div>{' '}\r\n        <TableTax\r\n          columns={columns}\r\n          data={data}\r\n          getTableProps={getTableProps}\r\n          getTableBodyProps={getTableBodyProps}\r\n          headerGroups={headerGroups}\r\n          page={page}\r\n          nextPage={nextPage}\r\n          previousPage={previousPage}\r\n          canNextPage={canNextPage}\r\n          canPreviousPage={canPreviousPage}\r\n          pageOptions={pageOptions}\r\n          state={state}\r\n          gotoPage={gotoPage}\r\n          pageCount={pageCount}\r\n          setPageSize={setPageSize}\r\n          prepareRow={prepareRow}\r\n          setFilter={setFilter}\r\n          pageIndex={pageIndex}\r\n          pageSize={pageSize}\r\n          actionWidth={true}\r\n        />\r\n        <Modal isOpen={createModel} toggle={toggle}>\r\n          <ModalHeader\r\n            toggle={toggle}\r\n            close={\r\n              <FontAwesomeIcon\r\n                onClick={toggle}\r\n                className='model_close_btn'\r\n                icon={faTimes}\r\n              />\r\n            }></ModalHeader>\r\n          <ModalBody>\r\n            <div className='d-flex justify-content-center w-100 mb-2'>\r\n              <h4>Create Dealer</h4>\r\n            </div>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={(props) => onSubmit(props)}>\r\n              {({\r\n                values,\r\n                touched,\r\n                errors,\r\n                isValid,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                dirty,\r\n              }) => (\r\n                <>\r\n                  <Form className='form' onSubmit={handleSubmit}>\r\n                    <FormGroup>\r\n                      <Label for='Distributor'>Dealer's Name</Label>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='name'\r\n                        value={values.name}\r\n                        onChange={handleChange}\r\n                        invalid={touched.name && errors.name}\r\n                        valid={dirty && !errors.name}\r\n                      />\r\n                      {errors.name === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.name}</FormFeedback>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for='State'>State</Label>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='state'\r\n                        value={values.state}\r\n                        onChange={handleChange}\r\n                        invalid={touched.state && errors.state}\r\n                        valid={dirty && !errors.state}\r\n                      />\r\n                      {errors.state === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.state}</FormFeedback>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for='City'>City</Label>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='city'\r\n                        value={values.city}\r\n                        onChange={handleChange}\r\n                        invalid={touched.city && errors.city}\r\n                        valid={dirty && !errors.city}\r\n                      />\r\n                      {errors.city === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.city}</FormFeedback>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for='Contact Number'>Contact Number</Label>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='contact'\r\n                        value={values.contact}\r\n                        onChange={handleChange}\r\n                        invalid={touched.contact && errors.contact}\r\n                        valid={dirty && !errors.contact}\r\n                      />\r\n                      {errors.contact === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.contact}</FormFeedback>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for='Email Id'>Email Id</Label>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='email'\r\n                        type='email'\r\n                        value={values.email}\r\n                        onChange={handleChange}\r\n                        invalid={touched.email && errors.email}\r\n                        valid={dirty && !errors.email}\r\n                      />\r\n                      {errors.email === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.email}</FormFeedback>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for='Password'>Password</Label>\r\n                      <FastField\r\n                        as={Input}\r\n                        bsSize='sm'\r\n                        type='password'\r\n                        name='password'\r\n                        value={values.password}\r\n                        onChange={handleChange}\r\n                        invalid={touched.password && errors.password}\r\n                        valid={dirty && !errors.password}\r\n                      />\r\n                      {errors.password === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.password}</FormFeedback>\r\n                      )}\r\n                    </FormGroup>\r\n                    <Button\r\n                      type='submit'\r\n                      className='w-100 mt-3'\r\n                      color='secondary'\r\n                      disabled={!dirty || !isValid}>\r\n                      Save\r\n                    </Button>\r\n                  </Form>\r\n                </>\r\n              )}\r\n            </Formik>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dealers;\r\n","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Distributor\\Ditributor.jsx",["89","90"],"import { faEye, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { TableC } from '../../components/Table/TableC';\r\n\r\nconst Distributor = () => {\r\n  const [distributors, setdistributors] = useState('');\r\n  const [states, setstates] = useState([]);\r\n  const LoadDistributor = useCallback(async () => {\r\n    const result = await axios.get('http://localhost:3003/distributors');\r\n    setstates([...new Set(result.data.map((x) => x.state))]);\r\n    setdistributors(result.data);\r\n  }, [distributors]);\r\n  const deleteUser = useCallback(\r\n    async (e, rowIdx) => {\r\n      e.preventDefault();\r\n      await axios\r\n        .delete(`http://localhost:3003/distributors/${rowIdx}`)\r\n        .then((response) => {\r\n          console.log('response', response);\r\n        })\r\n        .catch((error) => {\r\n          console.log('error', error);\r\n        });\r\n      LoadDistributor();\r\n    },\r\n    [LoadDistributor]\r\n  );\r\n  useEffect(() => {\r\n    LoadDistributor();\r\n  }, []);\r\n  const DEALERS_COLUMN = useMemo(\r\n    () => [\r\n      {\r\n        Header: '#',\r\n        accessor: 'id',\r\n      },\r\n      { Header: 'Name', accessor: 'name' },\r\n      { Header: 'City', accessor: 'city' },\r\n      { Header: 'State', accessor: 'state' },\r\n      { Header: 'Contact No.', accessor: 'contact' },\r\n      {\r\n        Header: 'Actions',\r\n        accessor: 'action',\r\n        disableSortBy: true,\r\n        Cell: (props) => {\r\n          const rowIdx = props.row.original.id;\r\n\r\n          return (\r\n            <div className='d-flex justify-content-around'>\r\n              <span\r\n                onClick={(e) => {\r\n                  deleteUser(e, rowIdx);\r\n                }}>\r\n                <FontAwesomeIcon className='icon' icon={faEye} />\r\n              </span>\r\n\r\n              <span onClick={() => {}}>\r\n                <FontAwesomeIcon className='icon' icon={faTrash} />\r\n              </span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [deleteUser]\r\n  );\r\n\r\n  const columns = useMemo(() => DEALERS_COLUMN, [DEALERS_COLUMN]);\r\n  const data = useMemo(() => distributors, [distributors]);\r\n  return distributors === '' ? (\r\n    <div></div>\r\n  ) : (\r\n    <TableC\r\n      columns={columns}\r\n      searchTitle='Distributor'\r\n      searchPlaceHolder='Search Distributor'\r\n      dropdownList={states}\r\n      data={data}\r\n      heading=\"Distributor's List\"\r\n      filter='name'\r\n      dropfilter='state'\r\n      reload={LoadDistributor}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Distributor;\r\n","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Tax\\Tax.jsx",["91"],"import { faPlus, faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport { FastField, Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useFilters, usePagination, useSortBy, useTable } from 'react-table';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  FormFeedback,\r\n  FormGroup,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport TableTax from '../../components/Table/TableTax';\r\nconst initialValues = { id: '', code: '', gst: '', from: '', to: '' };\r\nconst initialValuess = {\r\n  id: '',\r\n  code: '',\r\n  gst: '',\r\n  rangeFrom: '',\r\n  rangeTo: '',\r\n  validFrom: '',\r\n  validTill: '',\r\n};\r\n\r\nconst Tax = () => {\r\n  const [transition, settransition] = useState(false);\r\n  const [taxValues, setTaxValues] = useState([initialValues]);\r\n  const [editTransitionModel, setEditTransitionModel] = useState(false);\r\n  const [createTransionModel, setcreateTransionModel] = useState(false);\r\n  const [createPerUnitModel, setCreatePerUnitModel] = useState(false);\r\n  const [editPerUnitModel, setEditPerUnitModel] = useState(false);\r\n  const [row, setRow] = useState('');\r\n  const toggle = () => {\r\n    editTransitionModel\r\n      ? setEditTransitionModel(!editTransitionModel)\r\n      : setcreateTransionModel(!createTransionModel);\r\n  };\r\n  const togglePerUnit = () => {\r\n    editPerUnitModel\r\n      ? setEditPerUnitModel(!editPerUnitModel)\r\n      : setCreatePerUnitModel(!createPerUnitModel);\r\n  };\r\n  const loadTax = useCallback(async () => {\r\n    transition\r\n      ? await axios.get('http://localhost:3003/perUnit').then((response) => {\r\n          setTaxValues(response.data);\r\n          setTaxHeaders(TAX_PER_UNIT_COLUMN);\r\n          return null;\r\n        })\r\n      : await axios\r\n          .get('http://localhost:3003/transitionValue')\r\n          .then((response) => {\r\n            setTaxValues(response.data);\r\n            setTaxHeaders(TAX_TRANSITION_VALUE_COLUMN);\r\n            return null;\r\n          })\r\n          .catch((error) => console.log(error));\r\n  }, [transition]);\r\n  const deleteRatePerUnit = useCallback(\r\n    async (props) => {\r\n      const rowid = props.id;\r\n      await axios\r\n        .delete(`http://localhost:3003/perUnit/${rowid}`)\r\n        .then((response) => {\r\n          loadTax();\r\n          return null;\r\n        })\r\n        .catch((error) => {\r\n          console.log('catch error', error);\r\n        });\r\n    },\r\n    [loadTax]\r\n  );\r\n  const TAX_PER_UNIT_COLUMN = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'HSN Code',\r\n        accessor: 'code',\r\n      },\r\n      {\r\n        Header: 'Range From',\r\n        accessor: 'rangeFrom',\r\n      },\r\n      {\r\n        Header: 'Range To',\r\n        accessor: 'rangeTo',\r\n      },\r\n      {\r\n        Header: 'GST',\r\n        accessor: 'gst',\r\n      },\r\n\r\n      {\r\n        Header: 'Valid From',\r\n        accessor: 'validFrom',\r\n      },\r\n\r\n      { Header: 'Valid Till', accessor: 'validTill' },\r\n\r\n      {\r\n        Header: 'Actions',\r\n        accessor: 'action',\r\n        disableSortBy: true,\r\n        Cell: (props) => {\r\n          const row = props.row.original;\r\n          return (\r\n            <>\r\n              <span\r\n                onClick={() => {\r\n                  deleteRatePerUnit(row);\r\n                }}>\r\n                <Button className='button delete'>Delete</Button>\r\n              </span>\r\n\r\n              <span\r\n                onClick={() => {\r\n                  setEditPerUnitModel(!editPerUnitModel);\r\n                  setRow(row);\r\n                }}>\r\n                <Button className='button edit ml-4'>Edit</Button>\r\n              </span>\r\n            </>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [editPerUnitModel, deleteRatePerUnit]\r\n  );\r\n\r\n  const TAX_TRANSITION_VALUE_COLUMN = [\r\n    {\r\n      Header: 'HSN Code',\r\n      accessor: 'code',\r\n    },\r\n\r\n    {\r\n      Header: 'GST',\r\n      accessor: 'gst',\r\n    },\r\n\r\n    {\r\n      Header: 'From',\r\n      accessor: 'from',\r\n    },\r\n\r\n    { Header: 'To', accessor: 'to' },\r\n\r\n    {\r\n      Header: 'Actions',\r\n      accessor: 'action',\r\n      disableSortBy: true,\r\n      width: 200,\r\n      Cell: (props) => {\r\n        const rowIdx = props.row.original;\r\n        return (\r\n          <>\r\n            <span\r\n              onClick={() => {\r\n                deleteTransition(rowIdx);\r\n              }}>\r\n              <Button className='button delete'>Delete</Button>\r\n            </span>\r\n\r\n            <span\r\n              onClick={() => {\r\n                setEditTransitionModel(!editTransitionModel);\r\n                setRow(rowIdx);\r\n              }}>\r\n              <Button className='button edit ml-4'>Edit</Button>\r\n            </span>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  const [taxHeaders, setTaxHeaders] = useState(TAX_TRANSITION_VALUE_COLUMN);\r\n\r\n  useEffect(() => {\r\n    loadTax();\r\n  }, [loadTax]);\r\n  const columns = useMemo(() => taxHeaders, [taxHeaders]);\r\n  const data = useMemo(() => taxValues, [taxValues]);\r\n  const [filterInput, setFilterInput] = useState('');\r\n  const validationSchema = yup.object().shape({\r\n    code: yup.string().required(),\r\n    gst: yup.number().required(),\r\n    from: yup.number().required(),\r\n    to: yup.number().required(),\r\n  });\r\n\r\n  const validationSchemas = yup.object().shape({\r\n    code: yup.string().required(),\r\n    gst: yup.number().required(),\r\n    rangeFrom: yup.number().required(),\r\n    rangeTo: yup.number().required(),\r\n    validFrom: yup.string().required(),\r\n    validTill: yup.string().required(),\r\n  });\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    state,\r\n    gotoPage,\r\n    pageCount,\r\n    setPageSize,\r\n    prepareRow,\r\n    setFilter,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n  const { pageIndex, pageSize } = state;\r\n  const handleSelectFilterChange = (e) => {\r\n    const value = e.target.value === 'true' ? true : false;\r\n    settransition(value);\r\n    loadTax();\r\n  };\r\n  const handleFilterChange = (e) => {\r\n    const value = e.target.value || undefined;\r\n\r\n    setFilter('code', value);\r\n    setFilterInput(value);\r\n  };\r\n  const deleteTransition = async (props) => {\r\n    const rowid = props.id;\r\n    await axios\r\n      .delete(`http://localhost:3003/transitionValue/${rowid}`)\r\n      .then((response) => {\r\n        loadTax();\r\n        return null;\r\n      })\r\n      .catch((error) => {\r\n        console.log('catch error', error);\r\n      });\r\n  };\r\n\r\n  const onEditTransitionSubmit = async (props) => {\r\n    const rowid = props.id;\r\n    await axios\r\n      .put(`http://localhost:3003/transitionValue/${rowid}`, props)\r\n      .then((response) => {\r\n        setEditTransitionModel(false);\r\n        loadTax();\r\n        return null;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const createTransionSubmit = async (props) => {\r\n    await axios\r\n      .post('http://localhost:3003/transitionValue', props)\r\n      .then((response) => {\r\n        setcreateTransionModel(false);\r\n        loadTax();\r\n        return null;\r\n      });\r\n  };\r\n  const onEditPerUnitSubmit = async (props) => {\r\n    const rowid = props.id;\r\n    await axios\r\n      .put(`http://localhost:3003/perUnit/${rowid}`, props)\r\n      .then((response) => {\r\n        setEditPerUnitModel(false);\r\n        loadTax();\r\n        return null;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const createPerUnitSubmit = async (props) => {\r\n    await axios\r\n      .post('http://localhost:3003/perUnit', props)\r\n      .then((response) => {\r\n        setCreatePerUnitModel(false);\r\n        loadTax();\r\n        return null;\r\n      });\r\n  };\r\n  return (\r\n    <Container>\r\n      <h4 className='pt-4 pb-5'>Tax</h4>\r\n      <div className='d-flex ml-3  mb-3'>\r\n        <div className='d-flex flex-column mr-3 w-100'>\r\n          <span>HSN Code</span>\r\n          <InputGroup size='sm'>\r\n            <Input\r\n              value={filterInput}\r\n              onChange={handleFilterChange}\r\n              placeholder='Search by HSN Code'\r\n            />\r\n            <InputGroupAddon addonType='append'>\r\n              <InputGroupText>\r\n                <FontAwesomeIcon className='icon' icon={faSearch} />\r\n              </InputGroupText>\r\n            </InputGroupAddon>\r\n          </InputGroup>\r\n        </div>\r\n        <div className='d-flex flex-column mr-3 w-100'>\r\n          <span>State</span>\r\n          <InputGroup size='sm'>\r\n            <Input type='select' onChange={(e) => handleSelectFilterChange(e)}>\r\n              {[\r\n                { name: 'Transition Value', value: false },\r\n                { name: 'Per-Unit', value: true },\r\n              ].map((data, index) => {\r\n                return (\r\n                  <option value={data.value} key={index}>\r\n                    {data.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Input>\r\n          </InputGroup>\r\n        </div>\r\n        <div className='d-flex w-100 createitem'>\r\n          <Button\r\n            onClick={() => {\r\n              createPerUnitModel ? toggle() : togglePerUnit();\r\n            }}>\r\n            <span className='mr-2'>{<FontAwesomeIcon icon={faPlus} />}</span>\r\n            Create New\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <TableTax\r\n        columns={columns}\r\n        data={data}\r\n        getTableProps={getTableProps}\r\n        getTableBodyProps={getTableBodyProps}\r\n        headerGroups={headerGroups}\r\n        page={page}\r\n        nextPage={nextPage}\r\n        previousPage={previousPage}\r\n        canNextPage={canNextPage}\r\n        canPreviousPage={canPreviousPage}\r\n        pageOptions={pageOptions}\r\n        state={state}\r\n        gotoPage={gotoPage}\r\n        pageCount={pageCount}\r\n        setPageSize={setPageSize}\r\n        prepareRow={prepareRow}\r\n        setFilter={setFilter}\r\n        pageIndex={pageIndex}\r\n        pageSize={pageSize}\r\n        actionWidth={true}\r\n      />\r\n      <Modal\r\n        isOpen={editTransitionModel ? editTransitionModel : createTransionModel}\r\n        toggle={toggle}>\r\n        <ModalHeader\r\n          toggle={toggle}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={toggle}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <Formik\r\n            initialValues={editTransitionModel ? row : initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={\r\n              editTransitionModel\r\n                ? (props) => onEditTransitionSubmit(props)\r\n                : (props) => createTransionSubmit(props)\r\n            }\r\n            isInitialValid={() => validationSchema.isValidSync(initialValues)}>\r\n            {({\r\n              values,\r\n              errors,\r\n              isValid,\r\n              handleBlur,\r\n              handleChange,\r\n              handleSubmit,\r\n              dirty,\r\n              touched,\r\n            }) => (\r\n              <>\r\n                <div className='d-flex justify-content-center w-100 mb-2'>\r\n                  {editTransitionModel ? <h4>Edit</h4> : <h4>Add</h4>}\r\n                </div>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      Code\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='code'\r\n                        value={values.code}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.code !== undefined}\r\n                        valid={errors.code === undefined && touched.code}\r\n                      />\r\n                      {errors.code === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.code}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      GST\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='gst'\r\n                        value={values.gst}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.gst !== undefined}\r\n                        valid={errors.gst === undefined && touched.gst}\r\n                      />\r\n                      {errors.gst === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.gst}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      From\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='from'\r\n                        value={values.from}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.from !== undefined}\r\n                        valid={errors.from === undefined && touched.from}\r\n                      />\r\n                      {errors.from === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.from}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      To\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='to'\r\n                        value={values.to}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.to !== undefined}\r\n                        valid={errors.to === undefined && touched.to}\r\n                      />\r\n                      {errors.to === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.to}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n      <Modal isOpen={editPerUnitModel ? editPerUnitModel : createPerUnitModel}>\r\n        <ModalHeader\r\n          toggle={togglePerUnit}\r\n          close={\r\n            <FontAwesomeIcon\r\n              onClick={togglePerUnit}\r\n              className='model_close_btn'\r\n              icon={faTimes}\r\n            />\r\n          }></ModalHeader>\r\n        <ModalBody>\r\n          <Formik\r\n            initialValues={editPerUnitModel ? row : initialValuess}\r\n            validationSchema={validationSchemas}\r\n            onSubmit={\r\n              editPerUnitModel\r\n                ? (props) => onEditPerUnitSubmit(props)\r\n                : (props) => createPerUnitSubmit(props)\r\n            }\r\n            isInitialValid={() =>\r\n              validationSchemas.isValidSync(initialValuess)\r\n            }>\r\n            {({\r\n              values,\r\n              isValid,\r\n              handleChange,\r\n              handleSubmit,\r\n              handleBlur,\r\n              errors,\r\n              dirty,\r\n              touched,\r\n            }) => (\r\n              <>\r\n                <div className='d-flex justify-content-center w-100 mb-2'>\r\n                  {editPerUnitModel ? <h4>Edit</h4> : <h4>Add</h4>}\r\n                </div>\r\n                <Form className='form' onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      Code\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='code'\r\n                        value={values.code}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.code !== undefined}\r\n                        valid={errors.code === undefined && touched.code}\r\n                      />\r\n                      {errors.code === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.code}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      GST\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='gst'\r\n                        value={values.gst}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.gst !== undefined}\r\n                        valid={errors.gst === undefined && touched.gst}\r\n                      />\r\n                      {errors.gst === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.gst}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      Range From\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='rangeFrom'\r\n                        value={values.rangeFrom}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.rangeFrom !== undefined}\r\n                        valid={\r\n                          errors.rangeFrom === undefined && touched.rangeFrom\r\n                        }\r\n                      />\r\n                      {errors.rangeFrom === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.rangeFrom}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      rangeTo\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='rangeTo'\r\n                        value={values.rangeTo}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.rangeTo !== undefined}\r\n                        valid={errors.rangeTo === undefined && touched.rangeTo}\r\n                      />\r\n                      {errors.rangeTo === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.rangeTo}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      Valid From\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='validFrom'\r\n                        value={values.validFrom}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.validFrom !== undefined}\r\n                        valid={\r\n                          errors.validFrom === undefined && touched.validFrom\r\n                        }\r\n                      />\r\n                      {errors.validFrom === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.validFrom}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                    <Label for='Distributor' className='region'>\r\n                      validTill\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <FastField\r\n                        as={Input}\r\n                        name='validTill'\r\n                        value={values.validTill}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        isValid={errors.validTill !== undefined}\r\n                        valid={\r\n                          errors.validTill === undefined && touched.validTill\r\n                        }\r\n                      />\r\n                      {errors.validTill === undefined ? (\r\n                        <FormFeedback></FormFeedback>\r\n                      ) : (\r\n                        <FormFeedback>{errors.validTill}</FormFeedback>\r\n                      )}\r\n                    </InputGroup>\r\n                  </FormGroup>\r\n                  <Button\r\n                    type='submit'\r\n                    className='w-100 mt-3'\r\n                    color='secondary'\r\n                    disabled={!dirty || !isValid}>\r\n                    Save\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Tax;\r\n","C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Distributor Order\\DistributorOrder.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\OrderDetails\\OrderDetails.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\DealerMargin\\DealerMargin.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\Item\\Item.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\containers\\SideNav\\SideNav.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\components\\Table\\TableC.js",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\assets\\Json\\data.js",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\containers\\MenuItem\\MenuItem.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\components\\Table\\TableTax.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\components\\NavList\\NavList.jsx",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\assets\\Json\\ORDER.js",[],"C:\\Users\\Neeraj\\OneDrive\\Documents\\order management\\oms\\src\\Pages\\InventoryVisibility\\InventoryVisibility.jsx",[],{"ruleId":"92","severity":1,"message":"93","line":13,"column":3,"nodeType":"94","messageId":"95","endLine":13,"endColumn":14},{"ruleId":"92","severity":1,"message":"96","line":15,"column":3,"nodeType":"94","messageId":"95","endLine":15,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":127,"column":5,"nodeType":"99","endLine":127,"endColumn":7,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":14,"column":6,"nodeType":"99","endLine":14,"endColumn":20,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"103","line":32,"column":6,"nodeType":"99","endLine":32,"endColumn":8,"suggestions":"104"},{"ruleId":"97","severity":1,"message":"105","line":68,"column":6,"nodeType":"99","endLine":68,"endColumn":18,"suggestions":"106"},"no-unused-vars","'CardColumns' is defined but never used.","Identifier","unusedVar","'CardGroup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'deleteDealer'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useCallback has an unnecessary dependency: 'distributors'. Either exclude it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'LoadDistributor'. Either include it or remove the dependency array.",["109"],"React Hook useCallback has missing dependencies: 'TAX_PER_UNIT_COLUMN' and 'TAX_TRANSITION_VALUE_COLUMN'. Either include them or remove the dependency array.",["110"],{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [deleteDealer]",{"range":"119","text":"120"},"Update the dependencies array to be: []",{"range":"121","text":"122"},"Update the dependencies array to be: [LoadDistributor]",{"range":"123","text":"124"},"Update the dependencies array to be: [TAX_PER_UNIT_COLUMN, TAX_TRANSITION_VALUE_COLUMN, transition]",{"range":"125","text":"126"},[3600,3602],"[deleteDealer]",[660,674],"[]",[1136,1138],"[LoadDistributor]",[2245,2257],"[TAX_PER_UNIT_COLUMN, TAX_TRANSITION_VALUE_COLUMN, transition]"]