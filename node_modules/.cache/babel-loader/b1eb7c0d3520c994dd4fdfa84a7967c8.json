{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neeraj\\\\OneDrive\\\\Documents\\\\order management\\\\oms\\\\src\\\\components\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useTable, useFilters } from 'react-table';\nimport { Table as table } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Table = ({\n  columns,\n  data\n}) => {\n  _s();\n\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    headerGroups,\n    // headerGroups, if your table has groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow,\n    // Prepare the row (this function needs to be called for each row before getting the row props)\n    setFilter // The useFilter Hook provides a way to set the filter\n\n  } = useTable({\n    columns,\n    data\n  }, useFilters);\n  const [filterInput, setFilterInput] = useState(''); // Update the state when input changes\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter('show.name', value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  }; // Input element\n\n\n  /*#__PURE__*/\n  _jsxDEV(\"input\", {\n    value: filterInput,\n    onChange: handleFilterChange,\n    placeholder: 'Search name'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table, \"YmQkWBoSvaxGh3ja8nL6h4z+gv0=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/Neeraj/OneDrive/Documents/order management/oms/src/components/Table/Table.js"],"names":["React","useState","useTable","useFilters","Table","table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","filterInput","setFilterInput","handleFilterChange","e","value","target","undefined","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,aAArC;AACA,SAASC,KAAK,IAAIC,KAAlB,QAA+B,YAA/B;;AACA,OAAO,MAAMD,KAAK,GAAG,CAAC;AAAEE,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AAAA;;AAC1C,QAAM;AACJC,IAAAA,aADI;AACW;AACfC,IAAAA,iBAFI;AAEe;AACnBC,IAAAA,YAHI;AAGU;AACdC,IAAAA,IAJI;AAIE;AACNC,IAAAA,UALI;AAKQ;AACZC,IAAAA,SANI,CAMO;;AANP,MAOFX,QAAQ,CACV;AACEI,IAAAA,OADF;AAEEC,IAAAA;AAFF,GADU,EAKVJ,UALU,CAPZ;AAeA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C,CAhB0C,CAkB1C;;AACA,QAAMe,kBAAkB,GAAIC,CAAD,IAAO;AAChC,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,IAAkBE,SAAhC;AACAP,IAAAA,SAAS,CAAC,WAAD,EAAcK,KAAd,CAAT,CAFgC,CAED;;AAC/BH,IAAAA,cAAc,CAACG,KAAD,CAAd;AACD,GAJD,CAnB0C,CAyB1C;;;AACA;AAAA;AACE,IAAA,KAAK,EAAEJ,WADT;AAEE,IAAA,QAAQ,EAAEE,kBAFZ;AAGE,IAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA;;AAMA,sBACE,sBAAWR,aAAX;AAAA,4BACE;AAAA,gBACGE,YAAY,CAACW,GAAb,CAAkBC,WAAD,iBAChB,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACvB,mBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,oBAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAUE,sBAAWlB,iBAAiB,EAA5B;AAAA,gBACGE,IAAI,CAACU,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;AACpBjB,QAAAA,UAAU,CAACgB,GAAD,CAAV;AACA,4BACE,mBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA,oBACGF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAeW,IAAD,IAAU;AACvB,gCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,wBAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFA;AADH;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAzDM;;GAAMvB,K;UAQPF,Q;;;KAROE,K","sourcesContent":["import React, { useState } from 'react';\r\nimport { useTable, useFilters } from 'react-table';\r\nimport { Table as table } from 'reactstrap';\r\nexport const Table = ({ columns, data }) => {\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    rows, // rows for the table based on the data passed\r\n    prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    setFilter, // The useFilter Hook provides a way to set the filter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useFilters\r\n  );\r\n\r\n  const [filterInput, setFilterInput] = useState('');\r\n\r\n  // Update the state when input changes\r\n  const handleFilterChange = (e) => {\r\n    const value = e.target.value || undefined;\r\n    setFilter('show.name', value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\r\n    setFilterInput(value);\r\n  };\r\n\r\n  // Input element\r\n  <input\r\n    value={filterInput}\r\n    onChange={handleFilterChange}\r\n    placeholder={'Search name'}\r\n  />;\r\n\r\n  return (\r\n    <table {...getTableProps}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map((cell) => {\r\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}