{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neeraj\\\\OneDrive\\\\Documents\\\\order management\\\\oms\\\\src\\\\components\\\\TableC\\\\TableC.js\",\n    _s = $RefreshSig$();\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useState } from 'react';\nimport { useTable, useFilters } from 'react-table';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Table } from 'reactstrap';\nimport './TableC.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TableC = ({\n  columns,\n  data,\n  heading\n}) => {\n  _s();\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    headerGroups,\n    // headerGroups, if your table has groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow,\n    // Prepare the row (this function needs to be called for each row before getting the row props)\n    setFilter // The useFilter Hook provides a way to set the filter\n\n  } = useTable({\n    columns,\n    data\n  }, useFilters);\n  const [filterInput, setFilterInput] = useState(''); // Update the state when input changes\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter('name', value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  };\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"pt-4 pb-5\",\n      children: heading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterInput,\n      onChange: handleFilterChange,\n      placeholder: 'Search name'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      className: \"\",\n      isOpen: dropdownOpen,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n        caret: true,\n        children: \"Select State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n          header: true,\n          children: \"State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          children: \"Some Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          text: true,\n          children: \"Dropdown Item Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          disabled: true,\n          children: \"Action (disabled)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          divider: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      bordered: true,\n      ...getTableProps,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this);\n            })\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TableC, \"lsul5U39z7AzkNMCnH59+RgaCms=\", false, function () {\n  return [useTable];\n});\n\n_c = TableC;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableC\");","map":{"version":3,"sources":["C:/Users/Neeraj/OneDrive/Documents/order management/oms/src/components/TableC/TableC.js"],"names":["FontAwesomeIcon","React","useState","useTable","useFilters","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Container","Table","TableC","columns","data","heading","dropdownOpen","setDropdownOpen","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","filterInput","setFilterInput","handleFilterChange","e","value","target","undefined","toggle","prevState","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport { useTable, useFilters } from 'react-table';\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Container,\r\n  Table,\r\n} from 'reactstrap';\r\nimport './TableC.css';\r\nexport const TableC = ({ columns, data, heading }) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    rows, // rows for the table based on the data passed\r\n    prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    setFilter, // The useFilter Hook provides a way to set the filter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useFilters\r\n  );\r\n\r\n  const [filterInput, setFilterInput] = useState('');\r\n\r\n  // Update the state when input changes\r\n  const handleFilterChange = (e) => {\r\n    const value = e.target.value || undefined;\r\n    setFilter('name', value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\r\n    setFilterInput(value);\r\n  };\r\n\r\n  const toggle = () => setDropdownOpen((prevState) => !prevState);\r\n  return (\r\n    <Container>\r\n      <h4 className='pt-4 pb-5'>{heading}</h4>\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={'Search name'}\r\n      />\r\n      <Dropdown className='' isOpen={dropdownOpen} toggle={toggle}>\r\n        <DropdownToggle caret>Select State{}</DropdownToggle>\r\n        <DropdownMenu>\r\n          <DropdownItem header>State</DropdownItem>\r\n          <DropdownItem>Some Action</DropdownItem>\r\n          <DropdownItem text>Dropdown Item Text</DropdownItem>\r\n          <DropdownItem disabled>Action (disabled)</DropdownItem>\r\n          <DropdownItem divider />\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n\r\n      <Table bordered {...getTableProps}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr key={i} {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </Container>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}